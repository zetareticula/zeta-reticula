name: Zeta Reticula CI/CD

on:
  push:
    branches: [ main ]
    paths:
      - 'core/**'
      - 'runtime/**'
      - 'interfaces/**'
      - 'master-service/**'
      - 'ns-router-rs/**'
      - 'salience-engine/**'
      - 'quantize-cli/**'
      - 'llm-rs/**'
      - 'agentflow-rs/**'
      - 'kvquant_rs/**'
      - 'shared/**'
      - 'k8s/**'
      - '.github/workflows/ci-cd.yaml'
      - 'Dockerfile*'
      - 'Cargo.toml'
      - 'Cargo.lock'
  pull_request:
    branches: [ main ]
    paths:
      - 'core/**'
      - 'runtime/**'
      - 'interfaces/**'
      - 'master-service/**'
      - 'ns-router-rs/**'
      - 'salience-engine/**'
      - 'quantize-cli/**'
      - 'llm-rs/**'
      - 'agentflow-rs/**'
      - 'kvquant_rs/**'
      - 'shared/**'
      - 'k8s/**'
      - '.github/workflows/ci-cd.yaml'
      - 'Dockerfile*'
      - 'Cargo.toml'
      - 'Cargo.lock'

env:
  AWS_REGION: us-west-2
  ECR_REPOSITORY: zeta-reticula
  EKS_CLUSTER: zeta-reticula-production
  KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          components: rustfmt, clippy
          profile: minimal

      - name: Cache Cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Run tests
        run: |
          # Build the unified CLI first
          cargo build --bin zeta
          
          # Test the entire workspace
          cargo test --workspace --all-features
          
          # Test CLI functionality
          ./target/debug/zeta system status
          ./target/debug/zeta --help
          
          # Test master-service specifically if Makefile exists
          if [ -f "master-service/Makefile" ]; then
            cd master-service
            make test
          fi

  validate-k8s:
    name: Validate Kubernetes Manifests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install kustomize
        run: |
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
          sudo mv kustomize /usr/local/bin/

      - name: Install kubeconform
        run: |
          set -euxo pipefail
          KUBECONFORM_VER=v0.6.7
          curl -L "https://github.com/yannh/kubeconform/releases/download/${KUBECONFORM_VER}/kubeconform-linux-amd64.tar.gz" \
            | tar -xz
          sudo mv kubeconform /usr/local/bin/

      - name: Validate Kubernetes manifests (schema + structure)
        run: |
          set -euxo pipefail
          # Validate base
          kustomize build k8s/base/ | kubeconform -strict -summary -ignore-missing-schemas
          # Validate dev
          kustomize build k8s/overlays/dev/ | kubeconform -strict -summary -ignore-missing-schemas
          # Validate prod
          kustomize build k8s/overlays/prod/ | kubeconform -strict -summary -ignore-missing-schemas
          # Validate master-service k8s if exists
          if [ -d "master-service/k8s/base" ]; then
            kustomize build master-service/k8s/base/ | kubeconform -strict -summary -ignore-missing-schemas
          fi

  build:
    name: Build and Push Docker Images
    needs: [test, validate-k8s]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.ECR_REPOSITORY }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=sha,format=long

      - name: Build and push workspace
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile.optimized
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy to EKS
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3

      - name: Update kubeconfig
        run: |
          aws eks --region ${{ env.AWS_REGION }} update-kubeconfig \
            --name ${{ env.EKS_CLUSTER }} \
            --kubeconfig kubeconfig
          
          echo "KUBE_CONFIG_BASE64=$(cat kubeconfig | base64 -w 0)" >> $GITHUB_ENV

      - name: Deploy to Kubernetes
        run: |
          echo "${{ env.KUBE_CONFIG }}" | base64 -d > kubeconfig
          export KUBECONFIG=./kubeconfig
          
          # Install kustomize
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
          sudo mv kustomize /usr/local/bin/
          
          # Deploy using the main k8s manifests
          cd k8s/overlays/prod
          kustomize edit set image \
            zetareticula/zeta-reticula=${{ secrets.DOCKERHUB_USERNAME }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
          
          kustomize build | kubectl apply -f -
          
          # Wait for deployments to complete
          kubectl rollout status deployment/api-service -n zeta-reticula --timeout=300s
          kubectl rollout status deployment/master-service -n zeta-reticula --timeout=300s
          kubectl rollout status deployment/worker -n zeta-reticula --timeout=300s

  notify:
    name: Notify Status
    needs: [test, validate-k8s, build, deploy]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Send Slack notification
        if: failure()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_TITLE: "Deployment ${{ job.status }} for ${{ github.repository }}"
          SLACK_MESSAGE: "${{ github.workflow }} run ${{ github.run_id }} completed with ${{ job.status }}"
          SLACK_COLOR: ${{ job.status == 'success' && 'good' || 'danger' }}
          MSG_MINIMAL: "${{ job.status }}: ${{ github.workflow }} #${{ github.run_id }} (${{ github.sha }})"
          SLACK_USERNAME: GitHub Actions
          SLACK_ICON: https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png
