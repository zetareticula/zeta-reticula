# Stage 1: Base builder with all build dependencies
FROM --platform=linux/amd64 rust:1.78-slim-bullseye as builder

# Install build dependencies with cleanup in one layer
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    pkg-config \
    libssl-dev \
    lld \
    clang \
    && rm -rf /var/lib/apt/lists/*

# Create a dummy project to cache dependencies
WORKDIR /usr/src/zeta
RUN cargo init --bin .

# Copy only the files needed for dependency resolution
COPY Cargo.toml Cargo.lock ./

# Install cargo-chef for better dependency caching
RUN cargo install cargo-chef --locked

# Prepare the recipe file
RUN cargo chef prepare --recipe-path recipe.json

# Build dependencies (cached unless Cargo.toml or Cargo.lock changes)
RUN cargo chef cook --release --recipe-path recipe.json

# Copy the rest of the source code
COPY . .

# Touch build.rs to ensure it's newer than the target directory
RUN touch build.rs

# Build the application with optimizations
RUN cargo build --release --bins \
    && strip /usr/src/zeta/target/release/zeta-infer

# Runtime image (ultra-slim)
FROM debian:bullseye-slim

# Install runtime dependencies with cleanup in one layer
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Copy only the binary from the builder
COPY --from=builder /usr/src/zeta/target/release/zeta-infer /usr/local/bin/

# Set environment variables for better performance
ENV RUST_LOG=info \
    RUST_BACKTRACE=1 \
    RUSTFLAGS="-C target-cpu=native"

# Non-root user for security
RUN useradd -m zeta
USER zeta

# Default command
ENTRYPOINT ["zeta-infer"]

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD ["sh", "-c", "curl -f http://localhost:8080/health || exit 1"]
